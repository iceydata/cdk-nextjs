"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Nextjs = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const fs = require("node:fs");
const os = require("os");
const path = require("path");
const constructs_1 = require("constructs");
const NextjsBuild_1 = require("./NextjsBuild");
const NextjsDistribution_1 = require("./NextjsDistribution");
const NextjsImage_1 = require("./NextjsImage");
const NextjsInvalidation_1 = require("./NextjsInvalidation");
const NextjsRevalidation_1 = require("./NextjsRevalidation");
const NextjsServer_1 = require("./NextjsServer");
const NextjsStaticAssets_1 = require("./NextjsStaticAssets");
/**
 * The `Nextjs` construct is a higher level construct that makes it easy to create a NextJS app.
 *
 * Your standalone server application will be bundled using o(utput tracing and will be deployed to a Lambda function.
 * Static assets will be deployed to an S3 bucket and served via CloudFront.
 * You must use Next.js 10.3.0 or newer.
 *
 * Please provide a `nextjsPath` to the Next.js app inside your project.
 *
 * @example
 * new Nextjs(this, "Web", {
 *   nextjsPath: path.resolve("packages/web"),
 * })
 */
class Nextjs extends constructs_1.Construct {
    /**
     * Where build-time assets for deployment are stored.
     */
    get tempBuildDir() {
        return this.props.tempBuildDir
            ? path.resolve(path.join(this.props.tempBuildDir, `nextjs-cdk-build-${this.node.id}-${this.node.addr.substring(0, 4)}`))
            : fs.mkdtempSync(path.join(os.tmpdir(), 'nextjs-cdk-build-'));
    }
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        // build nextjs app
        this.nextBuild = new NextjsBuild_1.NextjsBuild(this, id, { ...props, tempBuildDir: this.tempBuildDir });
        // deploy nextjs static assets to s3
        this.staticAssets = new NextjsStaticAssets_1.NextjsStaticAssets(this, 'StaticAssets', {
            bucket: props.defaults?.assetDeployment?.bucket,
            environment: props.environment,
            nextBuild: this.nextBuild,
        });
        this.serverFunction = new NextjsServer_1.NextjsServer(this, 'Server', {
            ...props,
            tempBuildDir: this.tempBuildDir,
            nextBuild: this.nextBuild,
            lambda: props.defaults?.lambda,
            staticAssetBucket: this.staticAssets.bucket,
        });
        // build image optimization
        this.imageOptimizationFunction = new NextjsImage_1.NextjsImage(this, 'ImgOptFn', {
            ...props,
            nextBuild: this.nextBuild,
            bucket: props.imageOptimizationBucket || this.bucket,
            lambdaOptions: props.defaults?.lambda,
        });
        // build revalidation queue and handler function
        this.revalidation = new NextjsRevalidation_1.NextjsRevalidation(this, 'Revalidation', {
            ...props,
            nextBuild: this.nextBuild,
            serverFunction: this.serverFunction,
        });
        this.distribution = new NextjsDistribution_1.NextjsDistribution(this, 'Distribution', {
            ...props,
            ...props.defaults?.distribution,
            staticAssetsBucket: this.staticAssets.bucket,
            tempBuildDir: this.tempBuildDir,
            nextBuild: this.nextBuild,
            serverFunction: this.serverFunction.lambdaFunction,
            imageOptFunction: this.imageOptimizationFunction,
        });
        if (!this.props.skipFullInvalidation) {
            new NextjsInvalidation_1.NextjsInvalidation(this, 'Invalidation', {
                distribution: this.distribution.distribution,
                dependencies: [], // [this.staticAssets, this.serverFunction, this.imageOptimizationFunction]
            });
        }
    }
    /**
     * URL of Next.js App.
     */
    get url() {
        const customDomain = this.distribution.customDomainName;
        return customDomain ? `https://${customDomain}` : this.distribution.url;
    }
    /**
     * Convenience method to access `Nextjs.staticAssets.bucket`.
     */
    get bucket() {
        return this.staticAssets.bucket;
    }
}
_a = JSII_RTTI_SYMBOL_1;
Nextjs[_a] = { fqn: "cdk-nextjs-standalone.Nextjs", version: "4.0.0-beta.3" };
exports.Nextjs = Nextjs;
//# sourceMappingURL=data:application/json;base64,